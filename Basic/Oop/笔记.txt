<?php
class 类名称 { #类名首字母大写
	成员变量列表
	function 成员方法1([参数1,参数2,......]) {
		成员方法1的具体实现
	}

	function 成员方法2([参数1,参数2,......]) {
		成员方法2的具体实现
	}
	省略其他成员方法
}

#继承
class 子类名称 extends 父类名称 {
	子类的成员变量列表;
	function 成员方法1([参数1,参数2,...]) {
		成员方法1的具体实现
	}
	
	function 成员方法2([参数1,参数2,...]) {
		成员方法2的具体实现
	}
	省略其他成员方法 
}

# 抽象类(Abstract Class)与接口(Interface)都是不能被实例化的特殊类
# 抽象类里的抽象方法都是没有具体实现的空方法。抽象类可以用来为子类设置功能定义,所以抽象类强制
# 开发人员只能从特定的父类来继承，然后在继承的子类中完成所需的具体功能。

#抽象
abstract class 抽象类名称 {
	抽象类的成员变量列表
	abstract function 成员方法1([参数1,参数2,......]);
	abstract function 成员方法2([参数1,参数2,......]);
	省略其他代码
}

#简单、完整的抽象类定义
<?php
  abstract class MyAClass {
     //定义抽象类MyAClass
     abstract protected function myAFunction($arg) {
        //定义抽象方法myAFunction()
     }
?>
在抽象类的定义中必须至少含有一个使用关键字abstract修饰并且没有任何实现的抽象方法

#当某个类要继承于抽象类时,必须包含该抽象类中定义的所有方法,否则在运行的时候就会出现错误信息

#接口是一组成员方法声明的集合,它只包含一些空的成员方法或者一些类常量,这些空的成员方法将由实现
#该接口的类去具体实现
interface 接口名称  {
    类常量列表
  function 成员方法1([参数]);
  function 成员方法2([参数]);
     省略其他代码
}
#Note:由于接口不能被实例化,所以接口不存在构造方法和析构方法,它只需要给出一组要实现的成员方法的声明即可。
<?php
   #定义接口MyIClass
   interface class MyIClass {
      public function myIFunction($arg);
   }
?>

抽象类与接口的区别
1.对接口的使用方式是通过关键字implements来实现的。对抽象类的操作是通过继承关键字extends来实现的
2.接口没有数据成员,但是抽象类有数据成员,抽象类可以实现数据的封装
3.接口没有构造函数,抽象类可以有抽象函数
4.接口中的方法都是public类型的，而抽象中的方法可以使用private、protected或public来修饰。
5.一个类可以同时实现多个接口,一个类却只能继承一个抽象类
6.在接口中不可以有成员方法的实现代码,在抽象类中可以有成员方法的实现代码
	